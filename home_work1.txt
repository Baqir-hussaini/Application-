
abs()
x = -10
print(abs(x)) # Output: 10
all()
numbers = [2, 4, 6, 8, 10]
print(all(numbers)) # Output: True
mixed_list = [2, 4, 0, 8, 10]  
print(all(mixed_list)) # Output: False
3.
numbers = [0, 0, 0, 0]
print(any(numbers)) # Output: False
mixed_list = [0, 1, 0, 1] 
print(any(mixed_list)) # Output: True
ascii()
text = "الساحر"
print(ascii(text)) # Output: '\\u0627\\u0644\\u0633\\u0627\\u062d\\u0631'
bin()
num = 42
print(bin(num)) # Output: '0b101010'
bool()
python
print(bool(0)) # Output: False
print(bool(1)) # Output: True
print(bool("")) # Output: False
print(bool("hello")) # Output: True
7.bytearray()
python
byte_arr = bytearray(5)
print(byte_arr) # Output: bytearray(b'\x00\x00\x00\x00\x00')
bytes()
byte_obj = bytes([1, 2, 3, 4, 5])
print(byte_obj) # Output: b'\x01\x02\x03\x04\x05'
9callable()
def my_function():
    pass
print(callable(my_function)) # Output: True
print(callable(42)) # Output: False

chr()
print(chr(65)) # Output: 'A'
print(chr(945)) # Output: 'α
classmethod
class MyClass:
    class_var = 0
    @classmethod
    def increment(cls):
        cls.class_var += 1
MyClass.increment()
print(MyClass.class_var) # Output: 1
compile()
source_ode = "print('Hello, World!')"
compiled_code = compile(source_code, "<string>", "exec")
exec(compiled_code)
print(complex(2, 3)) # Output: (2+3j)
print(complex("-1+2j")) # Output: (-1+2j)

delattr()
class Person:
    name = "John"
    age = 30

person = Person()
print(person.name) # Output: John
delattr(Person, "name")
dict()
my_dict = dict(name="John", age=30, city="New York")
print(my_dict) # Output: {'name': 'John', 'age': 30, 'city': 'New York'}
dir()
print(dir(list)) # Prints all the attributes and methods of the list class
باشه، اینجا مثال هایی برای توابع دیگر Python که ذکر کردید:

1. **divmod()**:
```python
result = divmod(10, 3)
print(result)  # Output: (3, 1)
```

2. **enumerate()**:
```python
fruits = ['apple', 'banana', 'cherry']
for i, fruit in enumerate(fruits):
    print(i, fruit)
# Output:
# 0 apple
# 1 banana
# 2 cherry
```

3. **eval()**:
```python
x = 5
expression = "x + 10"
result = eval(expression)
print(result)  # Output: 15
exec()
code = "print('Hello, World!')"
exec(code)
# Output: Hello, World!
filter()
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
print(even_numbers)  # Output: [2, 4, 6, 8, 10]
float()
print(float(42))   # Output: 42.0
print(float("3.14"))  # Output: 3.14
format()
name = "Alice"
age = 25
print("My name is {} and I'm {} years old.".format(name, age))
frozenset
fruits = ['apple', 'banana', 'cherry']
frozen_fruits = frozenset(fruits)
print(frozen_fruits)  # Output: frozenset({'apple', 'banana', 'cherry'})
getattr()
class Person:
    name = "John"
    age = 30
person = Person()
print(getattr(person, 'name'))  # Output: John

globals()
x = 5
print(globals())
# Output: {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, 'x': 5}
hasattr()
class Person:
    name = "John"
    age = 30
person = Person()
print(hasattr(person, 'name'))   # Output: True
print(hasattr(person, 'height')) # Output: False
hash()
print(hash("hello"))  # Output: 907803491
print(hash(42))      # Output: 4
help()python
help(print)
# Prints the documentation for the print() functio
hex()
print(hex(42))  # Output: '0x2a'
print(hex(-16)) # Output: '-0x10' 
id()
x = 42
print(id(x))  # Prints the unique identifier of the object
input()
name = input("What is your name? ")
print("Hello, " + name + "!")
print()
print("Hello, World!")
# Output: Hello, World!
print(42, 3.14, "Python")
# Output: 42 3.14 Python
name = "Alice"
age = 25
print("My name is {} and I'm {} years old.".format(name, age))
# Output: My name is Alice and I'm 25 years old.
property()
class Person:
    def __init__(self, name):
        self._name = name

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

person = Person("John")
print(person.name)  # Output: John
person.name = "Alice"
print(person.name)  # Output: Alice
range()
# Generate a sequence of numbers from 0 to 9
print(list(range(10)))
# Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# Generate a sequence of numbers from 1 to 10
print(list(range(1, 11)))
# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Generate a sequence of even numbers from 2 to 20
print(list(range(2, 21, 2)))
# Output: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
repr()
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def __repr__(self):
        return f"Person('{self.name}', {self.age})"
person = Person("John", 30)
print(repr(person))
# Output: Person('John', 30)
reversed()
numbers = [1, 2, 3, 4, 5]
reversed_numbers = list(reversed(numbers))
print(reversed_numbers)
round()
print(round(3.14))    # Output: 3
print(round(3.14159, 2))  # Output: 3.14
print(round(-2.678, 2))   # Output: -2.68
*set()
fruits = {'apple', 'banana', 'cherry'}
print(fruits)
# Output: {'apple', 'banana', 'cherry'}
unique_numbers = set([1, 2, 3, 2, 4, 5])
print(unique_numbers)
# Output: {1, 2, 3, 4, 5}
setattr()
class Person:
    name = "John"
    age = 30
person = Person()
setattr(person, 'name', 'Alice')
setattr(person, 'age', 25)
print(person.name)  # Output: Alice
print(person.age)   # Output: 25
slice()
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(numbers[2:7])     # Output: [3, 4, 5, 6, 7]
print(numbers[::2])     # Output: [1, 3, 5, 7, 9]
print(numbers[::-1])    # Output: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
sorted()
numbers = [5, 2, 8, 1, 9, 3]
sorted_numbers = sorted(numbers)
print(sorted_numbers)
# Output: [1, 2, 3, 5, 8, 9]
fruits = ['banana', 'apple', 'cherry', 'date']
sorted_fruits = sorted(fruits)
print(sorted_fruits)
# Output: ['apple', 'banana', 'cherry', 'date']
class Math:
    @staticmethod
    def add(a, b):
        return a + b
result = Math.add(5, 3)
print(result)  # Output: 8
str()
```python
print(str(42))    # Output: '42'
print(str(3.14))  # Output: '3.14'
print(str([1, 2, 3]))  # Output: '[1, 2, 3]'sum()
numbers = [1, 2, 3, 4, 5]
total = sum(numbers)
print(total)  # Output: 15

numbers = (10, 20, 30)
total = sum(numbers)
print(total)  # Output: 
super()
class Animal:
    def __init__(self, name):
        self.name = name
    def speak(self):
        print("The animal makes a sound.")
class Dog(Animal):
    def __init__(self, name):
        super().__init__(name)
    def speak(self):
        super().speak()
        print("The dog barks.")
dog = Dog("Buddy")
dog.speak()
tuple()
# Creating a tuple from a list
numbers = [1, 2, 3, 4, 5]
numbers_tuple = tuple(numbers)
print(numbers_tuple)
# Output: (1, 2, 3, 4, 5)

# Creating a tuple directly
person = ("Alice", 25)
print(person)
# Output: ('Alice', 25
vars()
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
person = Person("Alice", 30)
print(vars(person))
# Output: {'name': 'Alice', 'age': 30}
zip()
names = ['Alice', 'Bob', 'Charlie']
ages = [30, 25, 35]
person_info = list(zip(names, ages))
print(person_info)
# Output: [('Alice', 30), ('Bob', 25), ('Charlie', 35)]
__import__()
math_module = __import__('math')
print(math_module.pi)
# Output: 3.14159265358979